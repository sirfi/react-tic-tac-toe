{"version":3,"sources":["components/Square.js","components/Board.js","components/Game.js","components/App.js","serviceWorker.js","index.js"],"names":["Square","_ref","value","onClick","react_default","a","createElement","className","toLowerCase","Board","i","_this","this","components_Square","props","squares","renderSquare","Component","calculateWinner","lines","length","_lines$i","Object","slicedToArray","b","c","Game","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","history","Array","fill","stepNumber","nextPlayer","playerTypes","X","O","_this2","slice","setState","concat","computerPlay","filter","s","Math","round","random","handleSquareClick","player","type","_this3","step","_this4","status","_this5","current","winner","moves","map","move","desc","key","jumpTo","htmlFor","name","onChange","e","handleTypeChange","target","components_Board","App","components_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7a271763.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Square({value, onClick}) {\r\n    return (\r\n        <button className={\"square \" + (value?value.toLowerCase():\"\")} onClick={onClick}>\r\n            {value}\r\n        </button>\r\n    );\r\n}\r\nexport default Square;","import React, {Component} from \"react\";\r\nimport Square from \"./Square\";\r\n\r\nclass Board extends Component {\r\n\r\n    renderSquare(i) {\r\n        return <Square value={this.props.squares[i]} onClick={() => this.props.onClick(i)}/>\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"board-row\">\r\n                    {this.renderSquare(0)}\r\n                    {this.renderSquare(1)}\r\n                    {this.renderSquare(2)}\r\n                </div>\r\n                <div className=\"board-row\">\r\n                    {this.renderSquare(3)}\r\n                    {this.renderSquare(4)}\r\n                    {this.renderSquare(5)}\r\n                </div>\r\n                <div className=\"board-row\">\r\n                    {this.renderSquare(6)}\r\n                    {this.renderSquare(7)}\r\n                    {this.renderSquare(8)}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Board;","import React, {Component} from 'react';\r\nimport Board from './Board';\r\n\r\nfunction calculateWinner(squares) {\r\n    const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c])\r\n            return squares[a];\r\n    }\r\n    return null;\r\n}\r\n\r\n\r\nclass Game extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            history: [{\r\n                squares: Array(9).fill(null),\r\n            }],\r\n            stepNumber: 0,\r\n            nextPlayer: 'X',\r\n            playerTypes: {\r\n                X: 'human',\r\n                O: 'human'\r\n            }\r\n        };\r\n    }\r\n\r\n    handleSquareClick(i) {\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice();\r\n        if (calculateWinner(squares) || squares[i])\r\n            return;\r\n        squares[i] = this.state.nextPlayer;\r\n        this.setState({\r\n            history: history.concat([{\r\n                squares\r\n            }]),\r\n            stepNumber: history.length,\r\n            nextPlayer: this.state.nextPlayer === 'X' ? 'O' : 'X'\r\n        }, () => this.computerPlay());\r\n    }\r\n\r\n    computerPlay() {\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares;\r\n        if (this.state.playerTypes[this.state.nextPlayer] === 'computer' && squares.filter(s=>s===null).length>0) {\r\n            let i;\r\n            do {\r\n                i = Math.round(Math.random() * 8);\r\n            } while (squares[i] !== null);\r\n            this.handleSquareClick(i);\r\n        }\r\n    }\r\n\r\n    handleTypeChange(player, type) {\r\n        const playerTypes = this.state.playerTypes;\r\n        playerTypes[player] = type;\r\n        this.setState({\r\n            playerTypes\r\n        }, () => this.computerPlay());\r\n    }\r\n\r\n    jumpTo(step) {\r\n        this.setState({\r\n            stepNumber: step,\r\n            nextPlayer: (step % 2) === 1 ? 'O' : 'X'\r\n        }, () => this.computerPlay());\r\n    }\r\n\r\n    render() {\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n        const winner = calculateWinner(current.squares);\r\n\r\n        const moves = history.map((step, move) => {\r\n            const desc = move ?\r\n                ('Go to move #' + move) :\r\n                'Go to game start';\r\n            return (\r\n                <li key={move}>\r\n                    <button onClick={() => this.jumpTo(move)}>{desc}</button>\r\n                </li>\r\n            );\r\n        });\r\n\r\n        let status;\r\n        if (winner)\r\n            status = 'Winner : ' + winner;\r\n        else\r\n            status = 'Next Player : ' + this.state.nextPlayer;\r\n        return (\r\n            <div className=\"game\">\r\n                <div className=\"game-options\">\r\n                    <label htmlFor=\"XPlayerType\">X Player</label>\r\n                    <select name=\"XPlayerType\" value={this.state.playerTypes.X}\r\n                            onChange={e => this.handleTypeChange(\"X\", e.target.value)}>\r\n                        <option value=\"human\">Human</option>\r\n                        <option value=\"computer\">Computer</option>\r\n                    </select>\r\n                    <label htmlFor=\"OPlayerType\">O Player</label>\r\n                    <select name=\"OPlayerType\" value={this.state.playerTypes.O}\r\n                            onChange={e => this.handleTypeChange(\"O\", e.target.value)}>\r\n                        <option value=\"human\">Human</option>\r\n                        <option value=\"computer\">Computer</option>\r\n                    </select>\r\n                </div>\r\n                <div className=\"game-inner\">\r\n                    <div className=\"game-board\">\r\n                        <Board squares={current.squares} onClick={(i) => this.handleSquareClick(i)}/>\r\n                    </div>\r\n                    <div className=\"game-info\">\r\n                        <div>{status}</div>\r\n                        <ol>{moves}</ol>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Game;","import React, { Component } from 'react';\nimport Game from './Game';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return <Game/>;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}